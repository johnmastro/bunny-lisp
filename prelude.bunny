;; -*- clojure -*-

(def defmacro
  (macro!
   (fn defmacro (name args & body)
     (list 'def name
           (list 'macro!
                 (list* 'fn name args body))))))

(defmacro defn (name args & body)
  (list 'def name
        (list* 'fn name args body)))

(defn instance? (obj type)
  (identical? (type-of obj) type))

(defn number? (obj)
  (instance? obj 'number))

(defn symbol? (obj)
  (instance? obj 'symbol))

(defn string? (obj)
  (instance? obj 'string))

(defn list? (obj)
  (instance? obj 'list))

(defn closure? (obj)
  (instance? obj 'closure))

(defn intrinsic? (obj)
  (instance? obj 'intrinsic))

(defn function? (obj)
  ;; We don't have `or` yet
  (if (closure? obj)
    true
    (intrinsic? obj)))

(defn nil? (x)
  (identical? x nil))

(defn not (x)
  (if x false true))

(defn first (xs)   (nth xs 0))
(defn second (xs)  (nth xs 1))
(defn third (xs)   (nth xs 2))
(defn fourth (xs)  (nth xs 3))
(defn fifth (xs)   (nth xs 4))
(defn sixth (xs)   (nth xs 5))
(defn seventh (xs) (nth xs 6))
(defn eighth (xs)  (nth xs 7))
(defn ninth (xs)   (nth xs 8))
(defn tenth (xs)   (nth xs 9))

(defn identity (x)
  x)

(defn constantly (x)
  (fn (& args) x))

(defn fold-left (f val xs)
  (if xs
    (fold-left f (f val (first xs)) (rest xs))
    val))

(defn fold-right (f val xs)
  (if xs
      (f (first xs) (fold-right f val (rest xs)))
      val))

(defn map (f xs)
  (fold-left (fn (acc x) (append acc (f x)))
             nil
             xs))

(defn filter (pred? xs)
  (fold-left (fn (acc x) (if (pred? x) (append acc x) acc))
             nil
             xs))

(defmacro do (& body)
  (list (cons 'fn (cons () body))))

(defmacro let (bindings & body)
  (fold-right (fn (bind acc)
                (list (list 'fn
                            (list (first bind))
                            acc)
                      (second bind)))
              (cons 'do body)
              bindings))

(defmacro or (& forms)
  (if (nil? forms)
    nil
    (if (nil? (rest forms))
      (first forms)
      (let ((sym (gensym)))
        (list 'let (list (list sym (first forms)))
              (list 'if sym sym (cons 'or (rest forms))))))))

(defmacro and (& forms)
  (if (nil? forms)
    true
    (if (nil? (rest forms))
      (first forms)
      (let ((sym (gensym)))
        (list 'let (list (list sym (first forms)))
              (list 'if sym (cons 'and (rest forms)) sym))))))

(defmacro cond (& clauses)
  (fold-right (fn (clause acc)
                (let ((test-form (first clause))
                      (then-form (cons 'do (rest clause))))
                  (list 'if
                        test-form
                        then-form
                        acc)))
              nil
              clauses))

(def :else true)

(defmacro letfn (bindings & body)
  (if (nil? bindings)
    (cons 'do body)
    (let ((names (map first bindings))
          (defns (map (fn (bind)
                        (let ((name (nth bind 0))
                              (args (nth bind 1))
                              (body (rest (rest bind))))
                          (list 'set!
                                name
                                (list* 'fn name args body))))
                      bindings)))
      (list 'apply
            (list 'fn
                  names
                  (concat (cons 'do defns) body))
            (cons 'list (map (constantly nil) names))))))

(defn range (start stop)
  (letfn ((step (start stop acc)
            (if (< start stop)
              (step (+ start 1) stop (append acc start))
              acc)))
    (step start stop nil)))

(defmacro quasiquote (form)
  (letfn ((cons? (obj)
            (and obj (list? obj)))
          (transform-qq (form)
            (if (cons? form)
              (cond ((equal? (first form) 'unquote)
                     (second form))
                    ((equal? (first form) 'quasiquote)
                     (transform-qq (transform-qq (second form))))
                    ((and (cons? (first form))
                          (equal? (first (first form)) 'unquote-splicing))
                     (list 'concat
                           (second (first form))
                           (transform-qq (rest form))))
                    (:else
                     (list 'cons
                           (transform-qq (first form))
                           (transform-qq (rest form)))))
              (list 'quote form))))
    (transform-qq form)))
